// ===== ADMIN PANEL GENERAL JAVASCRIPT =====

document.addEventListener('DOMContentLoaded', function() {
    // Inicializar componentes gerais
    initGeneralComponents();
    initKeyboardShortcuts();
    initTooltips();
    
    // Log de inicialização
    console.log('Painel Administrativo inicializado com sucesso!');
    console.log('Sistema:', '{{ app_name() }}');
    console.log('Versão:', '{{ app_version() }}');
});

// ===== GENERAL COMPONENTS =====
function initGeneralComponents() {
    // Auto-hide alerts
    const alerts = document.querySelectorAll('.alert');
    alerts.forEach(alert => {
        setTimeout(() => {
            if (alert.parentNode) {
                alert.classList.add('fade');
                setTimeout(() => alert.remove(), 300);
            }
        }, 5000);
    });
    
    // Enable tooltips
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
    
    // Enable popovers
    const popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
}

// ===== KEYBOARD SHORTCUTS =====
function initKeyboardShortcuts() {
    document.addEventListener('keydown', function(e) {
        // Ctrl/Cmd + K para busca global
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
            e.preventDefault();
            openGlobalSearch();
        }
        
        // Ctrl/Cmd + S para salvar (se estiver em um formulário)
        if ((e.ctrlKey || e.metaKey) && e.key === 's') {
            e.preventDefault();
            saveCurrentForm();
        }
        
        // ESC para fechar modais
        if (e.key === 'Escape') {
            closeAllModals();
        }
    });
}

// ===== TOOLTIPS =====
function initTooltips() {
    // Adicionar tooltips aos botões de ação
    const actionButtons = document.querySelectorAll('[title]');
    actionButtons.forEach(button => {
        if (!button.hasAttribute('data-bs-toggle')) {
            button.setAttribute('data-bs-toggle', 'tooltip');
            new bootstrap.Tooltip(button);
        }
    });
}

// ===== UTILITY FUNCTIONS =====

// Busca global
function openGlobalSearch() {
    const searchModal = document.getElementById('globalSearchModal');
    if (searchModal) {
        const modal = new bootstrap.Modal(searchModal);
        modal.show();
        document.getElementById('globalSearchInput').focus();
    } else {
        console.log('Modal de busca global não encontrado');
    }
}

// Salvar formulário atual
function saveCurrentForm() {
    const activeForm = document.querySelector('form:focus-within');
    if (activeForm) {
        const submitButton = activeForm.querySelector('button[type="submit"]');
        if (submitButton) {
            submitButton.click();
        }
    }
}

// Fechar todos os modais
function closeAllModals() {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        const modalInstance = bootstrap.Modal.getInstance(modal);
        if (modalInstance) {
            modalInstance.hide();
        }
    });
}

// Mostrar notificação
function showNotification(message, type = 'info', duration = 5000) {
    const notification = document.createElement('div');
    notification.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
    notification.style.cssText = `
        top: 20px;
        right: 20px;
        z-index: 9999;
        min-width: 300px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    `;
    
    notification.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.body.appendChild(notification);
    
    // Auto-remover
    setTimeout(() => {
        if (notification.parentNode) {
            notification.classList.add('fade');
            setTimeout(() => notification.remove(), 300);
        }
    }, duration);
}

// Confirmar ação
function confirmAction(message, callback) {
    if (confirm(message)) {
        callback();
    }
}

// Carregar dados via AJAX
function loadData(url, options = {}) {
    const defaultOptions = {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
        }
    };
    
    const fetchOptions = { ...defaultOptions, ...options };
    
    return fetch(url, fetchOptions)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .catch(error => {
            console.error('Erro ao carregar dados:', error);
            showNotification('Erro ao carregar dados', 'error');
            throw error;
        });
}

// Salvar dados via AJAX
function saveData(url, data, method = 'POST') {
    const options = {
        method: method,
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    };
    
    return fetch(url, options)
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .catch(error => {
            console.error('Erro ao salvar dados:', error);
            showNotification('Erro ao salvar dados', 'error');
            throw error;
        });
}

// Formatar moeda
function formatCurrency(value) {
    return new Intl.NumberFormat('pt-BR', {
        style: 'currency',
        currency: 'BRL'
    }).format(value);
}

// Formatar data
function formatDate(date, format = 'dd/MM/yyyy') {
    const d = new Date(date);
    const day = String(d.getDate()).padStart(2, '0');
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const year = d.getFullYear();
    
    return format
        .replace('dd', day)
        .replace('MM', month)
        .replace('yyyy', year);
}

// Validar CPF
function validateCPF(cpf) {
    cpf = cpf.replace(/[^\d]/g, '');
    
    if (cpf.length !== 11) return false;
    
    // Verificar se todos os dígitos são iguais
    if (/^(\d)\1{10}$/.test(cpf)) return false;
    
    // Validar primeiro dígito verificador
    let sum = 0;
    for (let i = 0; i < 9; i++) {
        sum += parseInt(cpf.charAt(i)) * (10 - i);
    }
    let remainder = (sum * 10) % 11;
    if (remainder === 10 || remainder === 11) remainder = 0;
    if (remainder !== parseInt(cpf.charAt(9))) return false;
    
    // Validar segundo dígito verificador
    sum = 0;
    for (let i = 0; i < 10; i++) {
        sum += parseInt(cpf.charAt(i)) * (11 - i);
    }
    remainder = (sum * 10) % 11;
    if (remainder === 10 || remainder === 11) remainder = 0;
    if (remainder !== parseInt(cpf.charAt(10))) return false;
    
    return true;
}

// Validar CNPJ
function validateCNPJ(cnpj) {
    cnpj = cnpj.replace(/[^\d]/g, '');
    
    if (cnpj.length !== 14) return false;
    
    // Verificar se todos os dígitos são iguais
    if (/^(\d)\1{13}$/.test(cnpj)) return false;
    
    // Validar primeiro dígito verificador
    let sum = 0;
    const weights1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];
    for (let i = 0; i < 12; i++) {
        sum += parseInt(cnpj.charAt(i)) * weights1[i];
    }
    let remainder = sum % 11;
    let digit1 = remainder < 2 ? 0 : 11 - remainder;
    if (digit1 !== parseInt(cnpj.charAt(12))) return false;
    
    // Validar segundo dígito verificador
    sum = 0;
    const weights2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];
    for (let i = 0; i < 13; i++) {
        sum += parseInt(cnpj.charAt(i)) * weights2[i];
    }
    remainder = sum % 11;
    let digit2 = remainder < 2 ? 0 : 11 - remainder;
    if (digit2 !== parseInt(cnpj.charAt(13))) return false;
    
    return true;
}

// Validar e-mail
function validateEmail(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
}

// Debounce function
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Throttle function
function throttle(func, limit) {
    let inThrottle;
    return function() {
        const args = arguments;
        const context = this;
        if (!inThrottle) {
            func.apply(context, args);
            inThrottle = true;
            setTimeout(() => inThrottle = false, limit);
        }
    };
}

// ===== GLOBAL FUNCTIONS =====

// Função global para gerar relatório geral
function gerarRelatorioGeral() {
    showNotification('Gerando relatório geral...', 'info');
    
    fetch('/admin/relatorios/geral')
        .then(response => response.blob())
        .then(blob => {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'relatorio-geral.pdf';
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            showNotification('Relatório gerado com sucesso!', 'success');
        })
        .catch(error => {
            console.error('Erro ao gerar relatório:', error);
            showNotification('Erro ao gerar relatório', 'error');
        });
}

// Função global para ver compra
function verCompra(id) {
    fetch(`/admin/compras/${id}`)
        .then(response => response.text())
        .then(html => {
            document.getElementById('modalCompraBody').innerHTML = html;
            const modal = new bootstrap.Modal(document.getElementById('modalCompra'));
            modal.show();
        })
        .catch(error => {
            console.error('Erro ao carregar compra:', error);
            showNotification('Erro ao carregar detalhes da compra', 'error');
        });
}

// Função global para excluir compra
function excluirCompra(id) {
    confirmAction('Tem certeza que deseja excluir esta compra?', () => {
        fetch(`/admin/compras/${id}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showNotification('Compra excluída com sucesso!', 'success');
                setTimeout(() => window.location.reload(), 1500);
            } else {
                showNotification(data.message || 'Erro ao excluir compra', 'error');
            }
        })
        .catch(error => {
            console.error('Erro:', error);
            showNotification('Erro ao excluir compra', 'error');
        });
    });
}

// Função global para exportar compras
function exportarCompras() {
    const formData = new FormData();
    const status = document.getElementById('status').value;
    const dataInicio = document.getElementById('data_inicio').value;
    const dataFim = document.getElementById('data_fim').value;
    
    if (status) formData.append('status', status);
    if (dataInicio) formData.append('data_inicio', dataInicio);
    if (dataFim) formData.append('data_fim', dataFim);
    
    fetch('/admin/compras/export', {
        method: 'POST',
        body: formData
    })
    .then(response => response.blob())
    .then(blob => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'compras.xlsx';
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
        showNotification('Relatório exportado com sucesso!', 'success');
    })
    .catch(error => {
        console.error('Erro ao exportar:', error);
        showNotification('Erro ao exportar relatório', 'error');
    });
}

// ===== INITIALIZE ALL =====
console.log('Admin Panel JS carregado');
